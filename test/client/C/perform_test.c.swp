/****************************************************************************
 *       Filename:  perform_test.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  08/26/2012 10:09:11 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Wang Wencan 
 *	    Email:  never.wencan@gmail.com
 *        Company:  HPC Tsinghua
 ***************************************************************************/
#include <stdio.h>
#include <assert.h>

#include "mpi.h"
#include "cfio.h"
#include "debug.h"
#include "times.h"
#include "test_def.h"

int g_kRank, g_kSize;
int g_kLatProc, g_kLonProc;

void communication()
{
    double send_north[1024], send_south[1024], send_west[1024], send_east[1024], 
           recv_north[1024], recv_south[1024], recv_west[1024], recv_east[1024];
    int up, down, left, right, x, y, i;
    MPI_Request reqs[8];
    MPI_Status stas[8];

    for (i = 0; i < 1024; ++i) {
	send_north[i] = send_south[i] = send_west[i] = send_east[i] = 1.0;
    }

    x = g_kRank % g_kLatProc;
    y = g_kRank / g_kLatProc;

    up = g_kLatProc * ((y + 1) % g_kLonProc) + x;
    down = g_kLatProc * ((y - 1 + g_kLonProc) % g_kLonProc) + x;
    left = g_kLatProc * y + (x - 1 + g_kLatProc) % g_kLatProc;
    right = g_kLatProc * y + (x + 1) % g_kLatProc;

    MPI_Isend(send_north, 1024, MPI_DOUBLE, up, up, MPI_COMM_WORLD, &reqs[0]);
    MPI_Isend(send_south, 1024, MPI_DOUBLE, down, down, MPI_COMM_WORLD, &reqs[1]);
    MPI_Isend(send_west, 1024, MPI_DOUBLE, left, left, MPI_COMM_WORLD, &reqs[2]);
    MPI_Isend(send_east, 1024, MPI_DOUBLE, right, right, MPI_COMM_WORLD, &reqs[3]);

    MPI_Irecv(recv_north, 1024, MPI_DOUBLE, up, g_kRank, MPI_COMM_WORLD, &reqs[4]);
    MPI_Irecv(recv_south, 1024, MPI_DOUBLE, down, g_kRank, MPI_COMM_WORLD, &reqs[5]);
    MPI_Irecv(recv_west, 1024, MPI_DOUBLE, left, g_kRank, MPI_COMM_WORLD, &reqs[6]);
    MPI_Irecv(recv_east, 1024, MPI_DOUBLE, right, g_kRank, MPI_COMM_WORLD, &reqs[7]);

    for (i = 0; i < 8; ++i) {
	MPI_Wait(&reqs[i], &stas[i]);
    }
}

int main(int argc, char** argv)
{
    int ncidp;
    int dim1, var1, i, j, l;

    size_t start[2], count[2];
    char fileName[100];
    char var_name[16];
    int *var;
    int kNumVar;

    double compute_time     = 0.0, 
	   io_time          = 0.0, 
	   communicate_time = 0.0, 
	   wait_io_time     = 0.0, 
	   init_time        = 0.0, 
	   final_time       = 0.0, 
	   total_time       = 0.0;

    int kNumIter, kSleepMs, kRatio;

    size_t len = 10;
    MPI_Comm comm = MPI_COMM_WORLD;

    if (8 != argc) {
	printf("Usage : perform_test g_kLatProc g_kLonProc output_dir kNumIter kSleepMs\n");
	return -1;
    }
    
    g_kLatProc = atoi(argv[1]);
    g_kLonProc = atoi(argv[2]);
    kRatio   = atoi(argv[3]);

    kNumIter = atoi(argv[5]);
    kSleepMs = atoi(argv[6]);
    kNumVar  = atoi(argv[7]);
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(comm, &g_kRank);
    MPI_Comm_size(comm, &g_kSize);

    // print args
    if (0 == g_kRank) {
	printf("LAT = %d \n LON = %d \n kNumVar = %d \n g_kLatProc = %d \n g_kLonProc = %d \n kRatio = %d \n  \
		kNumIter = %d \n SLEEP_TIME = %d \n kSleepMs = %d \n ", 
		LAT, LON, kNumVar, g_kLatProc, g_kLonProc, kRatio, kNumIter, SLEEP_TIME, kSleepMs);
    }

    times_init();
    double start_time = times_cur();

    start[0] = (g_kRank % g_kLatProc) * (LAT / g_kLatProc);
    start[1] = (g_kRank / g_kLatProc) * (LON / g_kLonProc);
    count[0] = LAT / g_kLatProc;
    count[1] = LON / g_kLonProc;
    double *fp = malloc(count[0] * count[1] *sizeof(double));

    for( i = 0; i< count[0] * count[1]; i++) {
	fp[i] = i + g_kRank * count[0] * count[1];
    }

    times_start(); //total_time

    times_start(); // init_time
    cfio_init( g_kLatProc, g_kLonProc, kRatio);
    init_time = times_end(); // init_time

    CFIO_START();
    double start_time = times_cur();

    var = malloc(sizeof(int) * kNumVar);

    for(i = 0; i < kNumIter; i ++)
    {
	times_start();
	if( SLEEP_TIME != 0)
	{
	    struct timeval sleep_begin, sleep_end;
	    // simulate computation of kSleepMs ms
	    gettimeofday(&sleep_begin, NULL);
	    do {
		gettimeofday(&sleep_end, NULL);
	    } while ((sleep_end.tv_sec - sleep_begin.tv_sec) * 1000 + (sleep_end.tv_usec - sleep_begin.tv_usec) / 1000 < kSleepMs);
	}
	compute_time += times_end();
	if (i > 2) { // record only kNumIter 3 - N
	    times_start(); // communicate_time
	}
	sprintf(fileName, "%s/cfio-%d.nc", argv[4], i);
	int dimids[2];
	cfio_create(fileName, NC_64BIT_OFFSET, &ncidp);
	int lat = LAT;
	cfio_def_dim(ncidp, "lat", LAT,&dimids[0]);
	cfio_def_dim(ncidp, "lon", LON,&dimids[1]);
	//cfio_put_att(ncidp, NC_GLOBAL, "global", NC_CHAR, 6, "global");

	for(j = 0; j < kNumVar; j++)
	{
	    sprintf(var_name, "time_v%d", j);
	    cfio_def_var(ncidp,var_name, CFIO_DOUBLE, 2,dimids, 
		    start, count, &var[j]);
	//    cfio_put_att(ncidp, var[j], "global", NC_CHAR, 
	//	    strlen(var_name), var_name );
	}
	cfio_enddef(ncidp);

	for(j = 0; j < kNumVar; j++)
	{
	    cfio_put_vara_double(ncidp,var[j], 2,start, count,fp);
	}
	//cfio_put_vara_float(g_kRank,ncidp,var1, 2,start, count,fp); 
	//cfio_put_vara_float(g_kRank,ncidp,var1, 2,start, count,fp); 

	cfio_close(ncidp);
	if (i > 2) {
	    communicate_time += times_end(); // communicate_time
	}
	if (i > 2) {
	    times_start(); // wait_io_time
	}
	cfio_io_end();
	if (i > 2) {
	    wait_io_time += times_end(); // wait_io_time
	}
    }
    free(fp);

    if (var) {
	free(var);
    }

    CFIO_END();

    times_start(); // final_time
    cfio_finalize();
    final_time = times_end(); // final_time

    total_time = times_end();

    if (0 == g_kRank) {
	printf("%8s %8s %8s %8s %8s %8s %8s %8s %8s\n", "proc", 
		"init", "final", "total", "compute", "communi", "waitIO", "IO", "simulate"); 
    }
    printf("%8d %8d %8d %8d %8d %8d %8d %8d %8d\n", g_kRank, 
	    (int)init_time, 
	    (int)final_time, 
	    (int)total_time,
	    (int)compute_time, 
	    (int)communicate_time, 
	    (int)wait_io_time, 
	    (int)(communicate_time + wait_io_time), 
	    (int)(total_time - init_time - final_time));
    
    MPI_Finalize();
    
    times_final();
    return 0;
}
